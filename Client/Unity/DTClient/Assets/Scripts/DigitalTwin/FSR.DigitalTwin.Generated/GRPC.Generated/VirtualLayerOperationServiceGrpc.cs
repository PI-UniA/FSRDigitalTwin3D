// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Services/VirtualLayerOperationService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace FSRAas.GRPC.Lib.V3.Services.Operational {
  public static partial class VirtualLayerOperationService
  {
    static readonly string __ServiceName = "FSRAas.GRPC.Lib.V3.Operational.VirtualLayerOperationService";

    static readonly grpc::Marshaller<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationStatus> __Marshaller_FSRAas_GRPC_Lib_V3_Operational_OperationStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationStatus.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationInvokeRequest> __Marshaller_FSRAas_GRPC_Lib_V3_Operational_OperationInvokeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationInvokeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSRAas.GRPC.Lib.V3.Services.OperationResult> __Marshaller_FSRAas_GRPC_Lib_V3_OperationResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSRAas.GRPC.Lib.V3.Services.OperationResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationResultRequest> __Marshaller_FSRAas_GRPC_Lib_V3_Operational_OperationResultRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationResultRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationStatus, global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationInvokeRequest> __Method_OpenOperationInvocationStream = new grpc::Method<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationStatus, global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationInvokeRequest>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "OpenOperationInvocationStream",
        __Marshaller_FSRAas_GRPC_Lib_V3_Operational_OperationStatus,
        __Marshaller_FSRAas_GRPC_Lib_V3_Operational_OperationInvokeRequest);

    static readonly grpc::Method<global::FSRAas.GRPC.Lib.V3.Services.OperationResult, global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationResultRequest> __Method_OpenOperationResultStream = new grpc::Method<global::FSRAas.GRPC.Lib.V3.Services.OperationResult, global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationResultRequest>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "OpenOperationResultStream",
        __Marshaller_FSRAas_GRPC_Lib_V3_OperationResult,
        __Marshaller_FSRAas_GRPC_Lib_V3_Operational_OperationResultRequest);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FSRAas.GRPC.Lib.V3.Services.Operational.VirtualLayerOperationServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VirtualLayerOperationService</summary>
    [grpc::BindServiceMethod(typeof(VirtualLayerOperationService), "BindService")]
    public abstract partial class VirtualLayerOperationServiceBase
    {
      public virtual global::System.Threading.Tasks.Task OpenOperationInvocationStream(grpc::IAsyncStreamReader<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationStatus> requestStream, grpc::IServerStreamWriter<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationInvokeRequest> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task OpenOperationResultStream(grpc::IAsyncStreamReader<global::FSRAas.GRPC.Lib.V3.Services.OperationResult> requestStream, grpc::IServerStreamWriter<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationResultRequest> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VirtualLayerOperationService</summary>
    public partial class VirtualLayerOperationServiceClient : grpc::ClientBase<VirtualLayerOperationServiceClient>
    {
      /// <summary>Creates a new client for VirtualLayerOperationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VirtualLayerOperationServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VirtualLayerOperationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VirtualLayerOperationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VirtualLayerOperationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VirtualLayerOperationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncDuplexStreamingCall<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationStatus, global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationInvokeRequest> OpenOperationInvocationStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenOperationInvocationStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationStatus, global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationInvokeRequest> OpenOperationInvocationStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_OpenOperationInvocationStream, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::FSRAas.GRPC.Lib.V3.Services.OperationResult, global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationResultRequest> OpenOperationResultStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenOperationResultStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::FSRAas.GRPC.Lib.V3.Services.OperationResult, global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationResultRequest> OpenOperationResultStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_OpenOperationResultStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VirtualLayerOperationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VirtualLayerOperationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VirtualLayerOperationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_OpenOperationInvocationStream, serviceImpl.OpenOperationInvocationStream)
          .AddMethod(__Method_OpenOperationResultStream, serviceImpl.OpenOperationResultStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VirtualLayerOperationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_OpenOperationInvocationStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationStatus, global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationInvokeRequest>(serviceImpl.OpenOperationInvocationStream));
      serviceBinder.AddMethod(__Method_OpenOperationResultStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::FSRAas.GRPC.Lib.V3.Services.OperationResult, global::FSRAas.GRPC.Lib.V3.Services.Operational.OperationResultRequest>(serviceImpl.OpenOperationResultStream));
    }

  }
  /// <summary>
  /// Just for testing....
  /// </summary>
  public static partial class YourService
  {
    static readonly string __ServiceName = "FSRAas.GRPC.Lib.V3.Operational.YourService";

    static readonly grpc::Marshaller<global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerRequest> __Marshaller_FSRAas_GRPC_Lib_V3_Operational_ServerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerResponse> __Marshaller_FSRAas_GRPC_Lib_V3_Operational_ServerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerRequest, global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerResponse> __Method_OpenChannel = new grpc::Method<global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerRequest, global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "OpenChannel",
        __Marshaller_FSRAas_GRPC_Lib_V3_Operational_ServerRequest,
        __Marshaller_FSRAas_GRPC_Lib_V3_Operational_ServerResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FSRAas.GRPC.Lib.V3.Services.Operational.VirtualLayerOperationServiceReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of YourService</summary>
    [grpc::BindServiceMethod(typeof(YourService), "BindService")]
    public abstract partial class YourServiceBase
    {
      public virtual global::System.Threading.Tasks.Task OpenChannel(grpc::IAsyncStreamReader<global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerRequest> requestStream, grpc::IServerStreamWriter<global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for YourService</summary>
    public partial class YourServiceClient : grpc::ClientBase<YourServiceClient>
    {
      /// <summary>Creates a new client for YourService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public YourServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for YourService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public YourServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected YourServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected YourServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncDuplexStreamingCall<global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerRequest, global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerResponse> OpenChannel(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenChannel(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerRequest, global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerResponse> OpenChannel(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_OpenChannel, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override YourServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new YourServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(YourServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_OpenChannel, serviceImpl.OpenChannel).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, YourServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_OpenChannel, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerRequest, global::FSRAas.GRPC.Lib.V3.Services.Operational.ServerResponse>(serviceImpl.OpenChannel));
    }

  }
}
#endregion
