// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Services/Connection/PoseStreamingService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection {
  public static partial class PoseStreaming
  {
    static readonly string __ServiceName = "FSR.DigitalTwinLayer.GRPC.Lib.PoseStreaming";

    static readonly grpc::Marshaller<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksRequest> __Marshaller_FSR_DigitalTwinLayer_GRPC_Lib_GetPoseLandmarksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksResponse> __Marshaller_FSR_DigitalTwinLayer_GRPC_Lib_GetPoseLandmarksResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksRequest> __Marshaller_FSR_DigitalTwinLayer_GRPC_Lib_GetWorldPoseLandmarksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksResponse> __Marshaller_FSR_DigitalTwinLayer_GRPC_Lib_GetWorldPoseLandmarksResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksRequest, global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksResponse> __Method_GetPoseLandmarks = new grpc::Method<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksRequest, global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPoseLandmarks",
        __Marshaller_FSR_DigitalTwinLayer_GRPC_Lib_GetPoseLandmarksRequest,
        __Marshaller_FSR_DigitalTwinLayer_GRPC_Lib_GetPoseLandmarksResponse);

    static readonly grpc::Method<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksRequest, global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksResponse> __Method_GetWorldPoseLandmarks = new grpc::Method<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksRequest, global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorldPoseLandmarks",
        __Marshaller_FSR_DigitalTwinLayer_GRPC_Lib_GetWorldPoseLandmarksRequest,
        __Marshaller_FSR_DigitalTwinLayer_GRPC_Lib_GetWorldPoseLandmarksResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.PoseStreamingServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PoseStreaming</summary>
    [grpc::BindServiceMethod(typeof(PoseStreaming), "BindService")]
    public abstract partial class PoseStreamingBase
    {
      public virtual global::System.Threading.Tasks.Task<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksResponse> GetPoseLandmarks(global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksResponse> GetWorldPoseLandmarks(global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PoseStreaming</summary>
    public partial class PoseStreamingClient : grpc::ClientBase<PoseStreamingClient>
    {
      /// <summary>Creates a new client for PoseStreaming</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PoseStreamingClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PoseStreaming that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PoseStreamingClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PoseStreamingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PoseStreamingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksResponse GetPoseLandmarks(global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPoseLandmarks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksResponse GetPoseLandmarks(global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPoseLandmarks, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksResponse> GetPoseLandmarksAsync(global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPoseLandmarksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksResponse> GetPoseLandmarksAsync(global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPoseLandmarks, null, options, request);
      }
      public virtual global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksResponse GetWorldPoseLandmarks(global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorldPoseLandmarks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksResponse GetWorldPoseLandmarks(global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorldPoseLandmarks, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksResponse> GetWorldPoseLandmarksAsync(global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorldPoseLandmarksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksResponse> GetWorldPoseLandmarksAsync(global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorldPoseLandmarks, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PoseStreamingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PoseStreamingClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PoseStreamingBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetPoseLandmarks, serviceImpl.GetPoseLandmarks)
          .AddMethod(__Method_GetWorldPoseLandmarks, serviceImpl.GetWorldPoseLandmarks).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PoseStreamingBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetPoseLandmarks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksRequest, global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetPoseLandmarksResponse>(serviceImpl.GetPoseLandmarks));
      serviceBinder.AddMethod(__Method_GetWorldPoseLandmarks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksRequest, global::FSR.DigitalTwinLayer.GRPC.Lib.Services.Connection.GetWorldPoseLandmarksResponse>(serviceImpl.GetWorldPoseLandmarks));
    }

  }
}
#endregion
